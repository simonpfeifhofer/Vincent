<VisualMicro>
  <Program Name="Vincent.Peripheral" Ext=".ino" Location="C:\Source\Vincent\Vincent.Peripheral">
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\simon.pfeifhofer\AppData\Local\V.Micro\Arduino\Builds\Vincent.Peripheral\uno" ConfigurationDefineDebugConstant="1" ReportDisassembledView="1" ReportDetailedMemoryUsage="1" AdditionalPreprocessor="_DEBUG=1" ReCompileIfSourceIsNewer="1" SketchName="Vincent.Peripheral" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 100;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino/Genuino Uno" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\simon.pfeifhofer\Documents\Arduino" name="Arduino/Genuino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0x05" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.ide.path="C:\Program Files (x86)\Arduino" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="166" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}/" intellisense.include.paths="{intellisense.tools.path}avr/include/;{intellisense.tools.path}/avr/include/avr/;{intellisense.tools.path}lib\gcc\avr\4.8.1\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}/hardware/arduino/avr/bootloaders/{bootloader.file}&quot;" version="1.6.9" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="{compiler.warning_flags} -Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\cxdailki.kcd\Micro Platforms\arduino16x" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" ide.hint="For use with Arduino.cc 1.6.2+ ide" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.version="160" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="C:\Users\simon.pfeifhofer\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" vm.runtime.compiler.showwarnings="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Vincent.Peripheral.ino, line 221" Id="a1013405-bd41-43da-ba52-df639eaa868d" Enabled="1" Message="RGBLED" MessageTextType="0" PreProcessedMessage="RGBLED" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="221" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a1013405-bd41-43da-ba52-df639eaa868d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>214	          dataIndex++;
215	          MeModule module;
216	          module.device = device;
217	          module.port = port;
218	          module.slot = slot;
219	          module.pin = pin;
220	          if(device==RGBLED){
--&gt;221	            module.index = readBuffer(dataIndex++);
222	            module.values[0]=readBuffer(dataIndex++);
223	            module.values[1]=readBuffer(dataIndex++);
224	            module.values[2]=readBuffer(dataIndex++);
225	            if(led.getPort()!=port){
226	              led.reset(port);
227	            }
228	            if(module.index&gt;0){
229	              led.setColorAt(module.index-1,module.values[0],module.values[1],module.values[2]);
230	            }else{
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="Vincent.Peripheral.ino, line 238" Id="02fc2c88-6ea0-43ca-bb1f-fd38b2a08557" Enabled="1" Message="MOTOR" MessageTextType="0" PreProcessedMessage="MOTOR" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="238" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="56" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='02fc2c88-6ea0-43ca-bb1f-fd38b2a08557'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>231	              for(int t=0;t&lt;led.getNumber();t++){
232	                led.setColorAt(t,module.values[0],module.values[1],module.values[2]);
233	              }
234	            }
235	            led.show();
236	            callOK();
237	          }else if(device==MOTOR){
--&gt;238	            val.byteVal[0]=readBuffer(dataIndex++);
239	            val.byteVal[1]=readBuffer(dataIndex++);
240	            val.byteVal[2]=readBuffer(dataIndex++);
241	            val.byteVal[3]=readBuffer(dataIndex++);
242	            module.values[0]=val.floatVal;
243	            dc.reset(module.port);
244	            dc.run(module.values[0]);
245	            callOK();
246	          }else if(device==SEVSEG){
247	            val.byteVal[0]=readBuffer(dataIndex++);
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="Vincent.Peripheral.ino, line 247" Id="1926b506-ca24-43ae-9f43-fd6d4efc1b1e" Enabled="1" Message="SEVSEG" MessageTextType="0" PreProcessedMessage="SEVSEG" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="247" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="65" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1926b506-ca24-43ae-9f43-fd6d4efc1b1e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>240	            val.byteVal[2]=readBuffer(dataIndex++);
241	            val.byteVal[3]=readBuffer(dataIndex++);
242	            module.values[0]=val.floatVal;
243	            dc.reset(module.port);
244	            dc.run(module.values[0]);
245	            callOK();
246	          }else if(device==SEVSEG){
--&gt;247	            val.byteVal[0]=readBuffer(dataIndex++);
248	            val.byteVal[1]=readBuffer(dataIndex++);
249	            val.byteVal[2]=readBuffer(dataIndex++);
250	            val.byteVal[3]=readBuffer(dataIndex++);
251	            module.values[0]=val.floatVal;
252	            if(seg.getPort()!=port){
253	               seg.reset(port);
254	            }
255	            seg.display(module.values[0]);
256	            callOK();
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="Vincent.Peripheral.ino, line 259" Id="f6057fa0-fc2d-4052-9641-441723f2b4bc" Enabled="1" Message="SERVO" MessageTextType="0" PreProcessedMessage="SERVO" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="259" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="77" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f6057fa0-fc2d-4052-9641-441723f2b4bc'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>252	            if(seg.getPort()!=port){
253	               seg.reset(port);
254	            }
255	            seg.display(module.values[0]);
256	            callOK();
257	          }else if(device==SERVO){
258	            
--&gt;259	            val.byteVal[0]=readBuffer(dataIndex++);
260	            val.byteVal[1]=readBuffer(dataIndex++);
261	            val.byteVal[2]=readBuffer(dataIndex++);
262	            val.byteVal[3]=readBuffer(dataIndex++);
263	            module.values[0]=val.floatVal;
264	            angleServo=module.values[0];
265	            if(servo.getPort()!=port||servo.getSlot()!=slot){
266	              servo.reset(module.port,module.slot);
267	            }
268	            servo.write(abs(angleServo));
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="Vincent.Peripheral.ino, line 271" Id="59bc749b-4f48-42c9-9fe3-aad9b43332c8" Enabled="1" Message="LIGHT_SENSOR" MessageTextType="0" PreProcessedMessage="LIGHT_SENSOR" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="271" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="89" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='59bc749b-4f48-42c9-9fe3-aad9b43332c8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>264	            angleServo=module.values[0];
265	            if(servo.getPort()!=port||servo.getSlot()!=slot){
266	              servo.reset(module.port,module.slot);
267	            }
268	            servo.write(abs(angleServo));
269	            callOK();
270	          }else if(device==LIGHT_SENSOR){
--&gt;271	            val.byteVal[0]=readBuffer(dataIndex++);
272	            val.byteVal[1]=readBuffer(dataIndex++);
273	            val.byteVal[2]=readBuffer(dataIndex++);
274	            val.byteVal[3]=readBuffer(dataIndex++);
275	            module.values[0]=val.floatVal;
276	            if(generalDevice.getPort()!=port){
277	              generalDevice.reset(module.port);
278	            }
279	            generalDevice.Dwrite1(val.floatVal&gt;=1?HIGH:LOW);
280	            callOK();
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="Vincent.Peripheral.ino, line 282" Id="a3b04ae0-7ff2-4004-b78d-7adc49ec8b2c" Enabled="1" Message="DIGITAL_OUTPUT" MessageTextType="0" PreProcessedMessage="DIGITAL_OUTPUT" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="282" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="100" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a3b04ae0-7ff2-4004-b78d-7adc49ec8b2c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>275	            module.values[0]=val.floatVal;
276	            if(generalDevice.getPort()!=port){
277	              generalDevice.reset(module.port);
278	            }
279	            generalDevice.Dwrite1(val.floatVal&gt;=1?HIGH:LOW);
280	            callOK();
281	          }else if(device==DIGITAL_OUTPUT){
--&gt;282	              val.byteVal[0]=readBuffer(dataIndex++);
283	              val.byteVal[1]=readBuffer(dataIndex++);
284	              val.byteVal[2]=readBuffer(dataIndex++);
285	              val.byteVal[3]=readBuffer(dataIndex++);
286	              pinMode(module.pin,OUTPUT);
287	              analogWrite(module.pin,val.floatVal==1?1023:val.floatVal);         
288	          }else if(device==ANALOG_OUTPUT||device==PWM_OUTPUT){
289	              val.byteVal[0]=readBuffer(dataIndex++);
290	              val.byteVal[1]=readBuffer(dataIndex++);
291	              val.byteVal[2]=readBuffer(dataIndex++);
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="Vincent.Peripheral.ino, line 289" Id="d2bf5ea9-4b77-44dd-89d3-add63d11c3a3" Enabled="1" Message="ANALOG_OUTPUT PWM_OUTPUT" MessageTextType="0" PreProcessedMessage="ANALOG_OUTPUT PWM_OUTPUT" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="289" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="107" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d2bf5ea9-4b77-44dd-89d3-add63d11c3a3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>282	              val.byteVal[0]=readBuffer(dataIndex++);
283	              val.byteVal[1]=readBuffer(dataIndex++);
284	              val.byteVal[2]=readBuffer(dataIndex++);
285	              val.byteVal[3]=readBuffer(dataIndex++);
286	              pinMode(module.pin,OUTPUT);
287	              analogWrite(module.pin,val.floatVal==1?1023:val.floatVal);         
288	          }else if(device==ANALOG_OUTPUT||device==PWM_OUTPUT){
--&gt;289	              val.byteVal[0]=readBuffer(dataIndex++);
290	              val.byteVal[1]=readBuffer(dataIndex++);
291	              val.byteVal[2]=readBuffer(dataIndex++);
292	              val.byteVal[3]=readBuffer(dataIndex++);
293	              pinMode(module.pin,OUTPUT);
294	              analogWrite(module.pin,val.floatVal);
295	              callOK();
296	          }
297	        }
298	      }
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="Vincent.Peripheral.ino, line 215" Id="ba251bf3-7489-43c6-8cfa-b97eb0a5589b" Enabled="1" Message="&quot;Device: {device}, Port: {port}, Slot: {slot}, Pin: {pin}&quot;" MessageTextType="0" PreProcessedMessage="&quot;Device: {0}, Port: {1}, Slot: {2}, Pin: {3}&quot;" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.peripheral\vincent.peripheral.ino" FileLine="215" FileColumn="1" FunctionName="parseData()" FunctionLineOffset="33" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ba251bf3-7489-43c6-8cfa-b97eb0a5589b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>208	        while(l&gt;dataIndex-4){
209	          int device = readBuffer(dataIndex);
210	          dataIndex++;
211	          int pin = readBuffer(dataIndex);
212	          int port = (pin&amp;0xf0)&gt;&gt;4;
213	          int slot = pin&amp;0xf;
214	          dataIndex++;
--&gt;215	          MeModule module;
216	          module.device = device;
217	          module.port = port;
218	          module.slot = slot;
219	          module.pin = pin;
220	          if(device==RGBLED){
221	            module.index = readBuffer(dataIndex++);
222	            module.values[0]=readBuffer(dataIndex++);
223	            module.values[1]=readBuffer(dataIndex++);
224	            module.values[2]=readBuffer(dataIndex++);
</Source>
        <MessageVariables>
          <MessageVariable Name="device" Index="1" />
          <MessageVariable Name="port" Index="2" />
          <MessageVariable Name="slot" Index="3" />
          <MessageVariable Name="pin" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="app.js, line 54" Id="dee054ec-0907-43e3-ac6f-83535c33eb7a" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.brain\app.js" FileLine="54" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="Node.js" LocationType="3" Tag="&lt;vmbp Id='e97c0a6c-95d6-4ce5-ab32-29bf51b7e478'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>47	  console.log('found device: ', macAddress, ' ', rssi);   
48	});
49	*/
50	
51	var SerialPort = require("serialport").SerialPort;
52	require('./Module/ModuleBase.js');
53	require('./Module/ModulesRunner.js');
--&gt;54	require('./Module/DisplayModule.js');
55	require('./Module/UltraSonicModule.js');
56	
57	
58	var serialPort = new SerialPort("/dev/ttyAMA0", {
59	    baudrate: 115200
60	}, false);
61	
62	// create
63	var displayModule = new DisplayModule(serialPort, 0x61);
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="app.js, line 51" Id="7a4bc30c-530c-4541-9594-156fe0c3e465" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\source\vincent\vincent.brain\app.js" FileLine="51" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="Node.js" LocationType="3" Tag="&lt;vmbp Id='72416200-38eb-40c2-968f-11e2bcf432cc'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>44	noble.on('discover', function(peripheral) { 
45	  var macAddress = peripheral.uuid;
46	  var rssi = peripheral.rssi;
47	  console.log('found device: ', macAddress, ' ', rssi);   
48	});
49	*/
50	
--&gt;51	var SerialPort = require("serialport").SerialPort;
52	require('./Module/ModuleBase.js');
53	require('./Module/ModulesRunner.js');
54	require('./Module/DisplayModule.js');
55	require('./Module/UltraSonicModule.js');
56	
57	
58	var serialPort = new SerialPort("/dev/ttyAMA0", {
59	    baudrate: 115200
60	}, false);
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>